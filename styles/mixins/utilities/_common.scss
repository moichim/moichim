@use "sass:map";

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
    $keys: sort-list(map-keys($map));
    $sortedMap: ();
    @each $key in $keys {
      $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
    }
    @return $sortedMap;
}


@function sort-list($list) {
    $sorted-list: ();
    
    @for $i from 1 through length($list) {
      $min: nth($list, $i);
      $min-index: $i;
      
      @for $j from $i through length($list) {
        $current-item: nth($list, $j);
        
        @if $current-item < $min {
          $min: $current-item;
          $min-index: $j;
        }
      }
      
      $list: set-nth($list, $min-index, nth($list, $i));
      $list: set-nth($list, $i, $min);
      
      $sorted-list: append($sorted-list, $min);
    }
    
    @return $sorted-list;
}

@mixin printProperties( $propList ) {
    @each $property, $value in $propList {
        #{$property}: $value;
    }
}

@function map-mult( $map, $number ) {
    $result: ();

    @each $key, $value in $map {

        @if type-of($value) == number {
            $value: $value * $number;
        }
        $result: map.set( $result, $key, $value );

    }

    @return $result;
}

@function map-calc( $map, $number, $operation: "+" ) {
    $result: ();

    @each $key, $value in $map {

        @if type-of($value) == number {
            $value: calc( #{$value} #{$operation} #{$number});
        }
        $result: map.set( $result, $key, $value );

    }

    @return $result;
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
      @return $number / ($number * 0 + 1);
    }
  
    @return $number;
  }

@function gridItemWidthValue( $cols, $g: 1rem ) {
  @if $cols == 1 {
    @return 100%;
  }
  @else {
      @return calc(  #{ percentage( 1/$cols ) } - #{ $g * ( $cols - 1 ) / $cols } );
  }
}

@mixin gridItemWidth( $cols, $g: 1rem ) {
  width: percentage( 1/$cols );
    // width: gridItemWidthValue($cols,$g );
}

@mixin sharedVerticalPadding() {
    padding: 0 1rem;
    @include up( md ) {
        padding: 0 2rem;
    }
}